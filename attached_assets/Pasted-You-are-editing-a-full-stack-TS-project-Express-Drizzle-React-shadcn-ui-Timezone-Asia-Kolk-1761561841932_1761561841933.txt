You are editing a full-stack TS project (Express + Drizzle + React + shadcn/ui).
Timezone: Asia/Kolkata. Weekly ranges are Monday→Sunday, inclusive.

=====================================
TASK
=====================================
Update the **Settlements** page so that:
- Rows are **read-only by default** (no inputs).
- “Company Rent” and “Company Wallet” display as em-dash “—” when blank.
- Clicking **Edit** switches only that row into edit mode (two inputs appear).
- In edit mode, show **Save** and **Cancel** instead of Edit/Delete.
- Profit appears **only when both Company fields are provided** (use edited values while editing, else saved values).
- Keep Trip Log look: colored amounts (Rent green, Wallet purple), compact actions, INR integers.
- All historical weeks must be present (already provided by server; no API changes).

NO DB or server changes are required if weekly_settlements + /api/settlements are already implemented.

=====================================
CLIENT: replace the page
=====================================
File: client/src/pages/settlements.tsx
Replace the component with this version (adjust import paths if needed):

```tsx
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { getSettlements, saveSettlement, deleteSettlement } from "../lib/api";
import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Table, TableHead, TableHeader, TableRow, TableBody, TableCell } from "@/components/ui/table";

const inr = (n:number)=> new Intl.NumberFormat("en-IN",{style:"currency",currency:"INR",maximumFractionDigits:0}).format(n||0);
const fmt = (iso:string)=> new Date(iso).toLocaleDateString("en-GB");

type Key = string; // `${weekStart}-${weekEnd}`

export default function SettlementsPage() {
  const qc = useQueryClient();
  const { data, isLoading, error } = useQuery({ queryKey:["settlements"], queryFn: getSettlements });
  const rows = data?.items ?? [];

  // which row is in edit mode + its drafts
  const [editingKey, setEditingKey] = useState<Key | null>(null);
  const [draftCR, setDraftCR] = useState<string>(""); // Company Rent
  const [draftCW, setDraftCW] = useState<string>(""); // Company Wallet

  const mSave = useMutation({
    mutationFn: saveSettlement,
    onSuccess: () => {
      setEditingKey(null);
      setDraftCR("");
      setDraftCW("");
      qc.invalidateQueries({ queryKey:["settlements"] });
    },
  });
  const mDel = useMutation({
    mutationFn: ({weekStart, weekEnd}:{weekStart:string; weekEnd:string}) => deleteSettlement(weekStart, weekEnd),
    onSuccess: () => qc.invalidateQueries({ queryKey:["settlements"] }),
  });

  const onEdit = (key: Key, crInit: number | null, cwInit: number | null) => {
    setEditingKey(key);
    setDraftCR(crInit!=null? String(crInit):"");
    setDraftCW(cwInit!=null? String(cwInit):"");
  };
  const onCancel = () => {
    setEditingKey(null);
    setDraftCR("");
    setDraftCW("");
  };
  const onSave = (weekStart:string, weekEnd:string) => {
    mSave.mutate({
      weekStart,
      weekEnd,
      companyRent: draftCR==="" ? null : Number(draftCR),
      companyWallet: draftCW==="" ? null : Number(draftCW),
    });
  };

  return (
    <div className="space-y-4">
      <h1 className="text-2xl font-bold">Settlements</h1>

      <Card className="p-0 overflow-hidden">
        <Table>
          <TableHead>
            <TableRow>
              <TableHeader>Week</TableHeader>
              <TableHeader className="text-right">Rent</TableHeader>
              <TableHeader className="text-right">Wallet</TableHeader>
              <TableHeader className="text-right">Company Rent</TableHeader>
              <TableHeader className="text-right">Company Wallet</TableHeader>
              <TableHeader className="text-right">Room Rent</TableHeader>
              <TableHeader className="text-right">Profit</TableHeader>
              <TableHeader className="text-right">Actions</TableHeader>
            </TableRow>
          </TableHead>
          <TableBody>
            {isLoading && <TableRow><TableCell colSpan={8}>Loading…</TableCell></TableRow>}
            {error && <TableRow><TableCell colSpan={8}>Failed to load.</TableCell></TableRow>}
            {!isLoading && rows.length===0 && <TableRow><TableCell colSpan={8}>No data.</TableCell></TableRow>}

            {rows.map(r => {
              const key: Key = `${r.weekStart}-${r.weekEnd}`;
              const editing = editingKey === key;

              // profit should use edited values in edit mode, else saved values
              const canCalc = editing ? (draftCR!=="" && draftCW!=="") : (r.companyRent!=null && r.companyWallet!=null);
              const profit = canCalc
                ? (r.rent - r.wallet - Number(editing?draftCR:(r.companyRent||0)) + Number(editing?draftCW:(r.companyWallet||0)) - r.roomRent)
                : null;

              return (
                <TableRow key={key}>
                  <TableCell>{fmt(r.weekStart)} – {fmt(r.weekEnd)}</TableCell>

                  <TableCell className="text-right">
                    <span className="text-green-600 font-semibold">{inr(r.rent)}</span>
                  </TableCell>

                  <TableCell className="text-right">
                    <span className="text-purple-600 font-semibold">{inr(r.wallet)}</span>
                  </TableCell>

                  <TableCell className="text-right">
                    {editing ? (
                      <Input className="text-right" type="number" min={0} step={1} value={draftCR} onChange={e=>setDraftCR(e.target.value)} />
                    ) : (r.companyRent==null ? "—" : inr(r.companyRent))}
                  </TableCell>

                  <TableCell className="text-right">
                    {editing ? (
                      <Input className="text-right" type="number" min={0} step={1} value={draftCW} onChange={e=>setDraftCW(e.target.value)} />
                    ) : (r.companyWallet==null ? "—" : inr(r.companyWallet))}
                  </TableCell>

                  <TableCell className="text-right">{inr(r.roomRent)}</TableCell>

                  <TableCell className="text-right">{profit==null ? "—" : inr(profit)}</TableCell>

                  <TableCell className="text-right space-x-2">
                    {!editing ? (
                      <>
                        <Button size="sm" variant="outline" onClick={()=>onEdit(key, r.companyRent, r.companyWallet)}>✎ Edit</Button>
                        <Button size="sm" variant="destructive" onClick={()=>mDel.mutate({ weekStart:r.weekStart, weekEnd:r.weekEnd })}>🗑 Delete</Button>
                      </>
                    ) : (
                      <>
                        <Button size="sm" onClick={()=>onSave(r.weekStart, r.weekEnd)} disabled={mSave.isPending}>✓ Save</Button>
                        <Button size="sm" variant="ghost" onClick={onCancel}>↩ Cancel</Button>
                      </>
                    )}
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
      </Card>
    </div>
  );
}
